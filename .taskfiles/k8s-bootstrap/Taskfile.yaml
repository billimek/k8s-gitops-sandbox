---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  talos:
    desc: Bootstrap Talos
    vars:
      TALOS_CONTROLLER:
        sh: talosctl --talosconfig "{{.TALOSCONFIG}}" config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - which jq minijinja-cli talosctl
      - test -f "{{.TALOSCONFIG}}"
      - talosctl config info
    cmds:
      - task: :talos:apply-clusterconfig
        vars:
          INSECURE: "true"
      - until talosctl --nodes {{.TALOS_CONTROLLER}} bootstrap; do sleep 5; done
      - talosctl kubeconfig --nodes {{.TALOS_CONTROLLER}} --force --force-context-name "home" "{{.KUBECONFIG}}"

  apps:
    desc: Bootstrap Apps
    prompt: Bootstrap apps into Talos cluster?
    preconditions:
      - which op helmfile kubectl
      - test -f "{{.TALOSCONFIG}}"
      - test -f {{.SETUP_DIR}}/bootstrap/helmfile.yaml
      - test -f {{.SETUP_DIR}}/bootstrap/templates/resources.yaml.j2
      # - test -f {{.SETUP_DIR}}/bootstrap/templates/wipe-rook.yaml.gotmpl
      - op user get --me
      - talosctl config info
    env:
      NODE_COUNT:
        sh: talosctl --talosconfig "{{.TALOSCONFIG}}" config info --output json | jq --raw-output '.nodes | length'
      # ROOK_DISK: nvme-Samsung_SSD_990_PRO_1TB
    cmds:
      - until kubectl wait nodes --for=condition=Ready=False --all --timeout=10m; do sleep 5; done
      - minijinja-cli "{{.SETUP_DIR}}/bootstrap/templates/resources.yaml.j2" | op inject | kubectl apply --server-side --filename -
      - helmfile --quiet --file {{.SETUP_DIR}}/bootstrap/helmfile.yaml apply --suppress-diff --skip-diff-on-install
      # - helmfile --quiet --file {{.SETUP_DIR}}/bootstrap/helmfile.yaml destroy --selector name=wipe-rook
